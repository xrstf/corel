{
// SPDX-FileCopyrightText: 2023 Christoph Mewes
// SPDX-License-Identifier: MIT

package parser

import "go.xrstf.de/rudi/pkg/lang/ast"
}

Program <- __ stmt:Statement stmts:(___ Statement)* __ EOF {
   p := ast.Program{
      Statements: []ast.Statement{stmt.(ast.Statement)},
   }

   stmtsSl := toAnySlice(stmts)
   if len(stmtsSl) == 0 {
      return p, nil
   }

   for _, stmt := range stmtsSl {
      subSl := toAnySlice(stmt)
      if s, ok := subSl[1].(ast.Statement); ok {
         p.Statements = append(p.Statements, s)
      }
   }

   return p, nil
}

// Statement is basically an alias for top-level expressions, making end-of-recursion detection easier.
Statement <- expr:Expression {
   return ast.Statement{Expression: expr.(ast.Expression)}, nil
}

// Expressions can be anything at all.
Expression <- Vector / Object / Tuple / Number / String / Null / Bool / Symbol / Identifier

// ScalarExpression are expressions that have a _chance_ to turn into a scalar.
ScalarExpression <- Number / String / Null / Bool / Tuple / Symbol / Identifier / ObjectWithPathExpression / VectorWithPathExpression

//////////////////////////////////////////////////////////
// tuples

Tuple <- '(' __ expr:Expression exprs:(___ Expression)* __ ')' path:AnyQualifiedPathExpression? {
   t := ast.Tuple{
      Expressions: []ast.Expression{expr.(ast.Expression)},
   }

   if path != nil {
      asserted := path.(ast.PathExpression)
      t.PathExpression = &asserted
   }

   exprsSl := toAnySlice(exprs)
   if len(exprsSl) == 0 {
      return t, nil
   }

   for _, expr := range exprsSl {
      subSl := toAnySlice(expr)
      t.Expressions = append(t.Expressions, subSl[1].(ast.Expression))
   }

   return t, nil
}

//////////////////////////////////////////////////////////
// vectors

VectorItemSeparator <- (__ ',' __) / ___

Vector <- vec:vector path:VectorQualifiedPathExpression? {
   vector := vec.(ast.VectorNode)

   if path != nil {
      asserted := path.(ast.PathExpression)
      vector.PathExpression = &asserted
   }

   return vector, nil
}

VectorWithPathExpression <- vec:vector path:VectorQualifiedPathExpression {
   vector := vec.(ast.VectorNode)

   pathExpr := path.(ast.PathExpression)
   vector.PathExpression = &pathExpr

   return vector, nil
}

vector <- '[' __ expr:Expression exprs:( VectorItemSeparator Expression )* __ ']' {
   vector := ast.VectorNode{
      Expressions: []ast.Expression{expr.(ast.Expression)},
   }

   exprsSl := toAnySlice(exprs)
   if len(exprsSl) == 0 {
      return vector, nil
   }

   for _, v := range exprsSl {
      vSl := toAnySlice(v)

      if len(vSl) > 1 {
         vector.Expressions = append(vector.Expressions, vSl[1].(ast.Expression))
      }
   }

   return vector, nil
} / '[' __ ']' {
   return ast.VectorNode{}, nil
}

//////////////////////////////////////////////////////////
// objects

Object <- obj:object path:ObjectQualifiedPathExpression? {
   o := obj.(ast.ObjectNode)

   if path != nil {
      asserted := path.(ast.PathExpression)
      o.PathExpression = &asserted
   }

   return o, nil
}

ObjectWithPathExpression <- obj:object path:ObjectQualifiedPathExpression {
   o := obj.(ast.ObjectNode)

   pathExpr := path.(ast.PathExpression)
   o.PathExpression = &pathExpr

   return o, nil
}

object <- '{' pairs:(__ KeyValuePair)* __ '}' {
   o := ast.ObjectNode{}

   pairsSl := toAnySlice(pairs)
   if len(pairsSl) == 0 {
      return o, nil
   }

   for _, pair := range pairsSl {
      pairSl := toAnySlice(pair)
      o.Data = append(o.Data, pairSl[1].(ast.KeyValuePair))
   }

   return o, nil
}

KeyValuePair <- (key:ScalarExpression __ value:Expression) {
   return ast.KeyValuePair{
      Key: key.(ast.Expression),
      Value: value.(ast.Expression),
   }, nil
}

//////////////////////////////////////////////////////////
// path expressions

Symbol <- '.' acc:VectorAccessor expr:AnyQualifiedPathExpression? {
   arrAcc := acc.(ast.Expression)

   pathExpr := ast.PathExpression{}
   if expr != nil {
      pathExpr = expr.(ast.PathExpression)
   }

   pathExpr.Prepend(arrAcc)

   return ast.Symbol{PathExpression: &pathExpr}, nil
} / acc:ObjectAccessor expr:AnyQualifiedPathExpression? {
   objAcc := acc.(ast.Expression)

   pathExpr := ast.PathExpression{}
   if expr != nil {
      pathExpr = expr.(ast.PathExpression)
   }

   pathExpr.Prepend(objAcc)

   return ast.Symbol{PathExpression: &pathExpr}, nil
} / val:Variable expr:AnyQualifiedPathExpression? {
   variable := val.(ast.Variable)

   var pathExpr *ast.PathExpression
   if expr != nil {
      asserted := expr.(ast.PathExpression)
      pathExpr = &asserted
   }

   return ast.Symbol{
      Variable: &variable,
      PathExpression: pathExpr,
   }, nil
} / '.' {
   return ast.Symbol{
      PathExpression: &ast.PathExpression{},
   }, nil
}

// AnyQualifiedPathExpression follows any qualifier
AnyQualifiedPathExpression <- pathExpr:(Accessor)+ {
   path := ast.PathExpression{}
   steps := toAnySlice(pathExpr)

   for i := range steps {
      path.Steps = append(path.Steps, steps[i].(ast.Expression))
   }

   return path, nil
}

// ObjectQualifiedPathExpression follows an object
ObjectQualifiedPathExpression <- begin:ObjectAccessor pathExpr:(Accessor)* {
   path := ast.PathExpression{
      Steps: []ast.Expression{begin.(ast.Expression)},
   }

   steps := toAnySlice(pathExpr)

   for i := range steps {
      path.Steps = append(path.Steps, steps[i].(ast.Expression))
   }

   return path, nil
}

// VectorQualifiedPathExpression follows a vector
VectorQualifiedPathExpression <- begin:VectorAccessor pathExpr:(Accessor)* {
   path := ast.PathExpression{
      Steps: []ast.Expression{begin.(ast.Expression)},
   }
   steps := toAnySlice(pathExpr)

   for i := range steps {
      path.Steps = append(path.Steps, steps[i].(ast.Expression))
   }

   return path, nil
}

Accessor <- ObjectAccessor / VectorAccessor

ObjectAccessor <- '.' val:PathIdentifier {
   return val, nil
}

VectorAccessor <- '[' __ expr:ScalarExpression __ ']' {
   return expr, nil
}

// This Pattern must be kept in-sync with the PathIdentifierPattern variable in the ast package.
PathIdentifier <- [a-zA-Z_][a-zA-Z0-9_]* {
   return ast.Identifier{Name: string(c.text)}, nil
}

//////////////////////////////////////////////////////////
// other symbols

Variable <- '$' name:VariableName {
   return ast.Variable(name.(string)), nil
}

// This Pattern must be kept in-sync with the VariableNamePattern variable in the ast package.
VariableName <- [a-zA-Z_][a-zA-Z0-9_]* {
   return string(c.text), nil
}

// This Pattern must be kept in-sync with the IdentifierNamePattern variable in the ast package.
Identifier <- [a-zA-Z_+/*_%?-][a-zA-Z0-9_+/*_%?!-]* {
   name := string(c.text)
   bang := false
   if strings.HasSuffix(name, "!") {
      bang = true
      name = strings.TrimSuffix(name, "!")
   }

   return ast.Identifier{Name: name, Bang: bang}, nil
}

//////////////////////////////////////////////////////////
// special types

Bool <- "true" { return ast.Bool(true), nil } / "false" { return ast.Bool(false), nil }

Null <- "null" { return ast.Null{}, nil }

//////////////////////////////////////////////////////////
// numbers (ints and floats)

Number <- '-'? Integer (( '.' DecimalDigit+ ) / Exponent) {
   // JSON numbers have the same syntax as Go's, and are parseable using
   // strconv.
   value, err := strconv.ParseFloat(string(c.text), 64)
   if err != nil {
      return nil, err // should never happen
   }

   return ast.Number{Value: value}, nil
} / i:Integer {
   return ast.Number{Value: i}, nil
}

Integer <- '0' {
   return int64(0), nil
} / '-'? NonZeroDecimalDigit DecimalDigit* {
   value, err := strconv.ParseInt(string(c.text), 10, 64)
   if err != nil {
      return nil, err // should never happen
   }

   return value, nil
}

DecimalDigit <- [0-9]

NonZeroDecimalDigit <- [1-9]

Exponent <- 'e'i [+-]? DecimalDigit+

//////////////////////////////////////////////////////////
// strings

String <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
   c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)

   unquoted, err := strconv.Unquote(string(c.text))
   if err != nil {
      return nil, err
   }

   return ast.String(unquoted), nil
}

EscapedChar <- [\x00-\x1f"\\]

EscapeSequence <- SingleCharEscape / UnicodeEscape

SingleCharEscape <- ["\\/bfnrt]

UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit

HexDigit <- [0-9a-f]i

//////////////////////////////////////////////////////////
// comments

SingleLineComment ← "#" ( !EOL . )*

//////////////////////////////////////////////////////////
// misc

___ <- ( Whitespace / EOL / SingleLineComment )+
__ <- ( Whitespace / EOL / SingleLineComment )*
_ <- Whitespace*

Whitespace <- [ \t\r]
EOL <- '\n'
EOS <- _ SingleLineComment? EOL / __ EOF

EOF <- !.
